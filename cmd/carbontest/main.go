package main

import (
	"fmt"
	"log"
	"os"
	"os/signal"
	"sync/atomic"
	"syscall"

	//"strconv"
	"strings"
	"time"

	"github.com/msaf1980/cyclicbarrier"
	"github.com/spf13/cobra"
	lock "github.com/viney-shih/go-lock"

	"carbontest/pkg/base"
	"carbontest/pkg/metriclist"
)

var (
	mainConfig MainConfig

	mutex *lock.CASMutex = lock.NewCASMutex()
	cb    *cyclicbarrier.CyclicBarrier

	totalStat      = map[base.Proto]map[base.NetOper]map[base.NetErr]int64{}
	stat           = map[base.Proto]map[base.NetOper]map[base.NetErr]int64{}
	startTimestamp int64
	endTimestamp   int64

	// aggrTime int
	// aggrTimestamp int64
	running int32 = 1
)

func sigHandler() {
	c := make(chan os.Signal, 1)
	signal.Notify(c, syscall.SIGINT, syscall.SIGTERM, syscall.SIGHUP)

	signal := <-c
	log.Printf("Signal %s recieved", signal.String())

	switch signal {
	case syscall.SIGINT, syscall.SIGTERM, syscall.SIGHUP:
		atomic.StoreInt32(&running, 0)
	}
}

func standaloneRun(cmd *cobra.Command, args []string) {
	var err error

	if len(args) > 0 {
		fmt.Fprintf(os.Stderr, "\n%v\n%v\n", os.Args, mainConfig.Shared.AutostopChecks)
		fmt.Fprintf(os.Stderr, "unhandled args: %v\n", args)
		cmd.Help()
		os.Exit(1)
	}

	if err := localPostConfig(&mainConfig.Local); err != nil {
		fmt.Fprintf(os.Stderr, "%s\n", err.Error())
		os.Exit(1)
	}

	workerConfig := mainConfig.Workers["localhost"]

	if len(mainConfig.Local.MetricFiles) > 0 {
		mainConfig.Local.MetricsList, err = metriclist.LoadMetricFile(mainConfig.Local.MetricFiles,
			mainConfig.Shared.Min, mainConfig.Shared.Max, mainConfig.Shared.Incr)
		if err != nil {
			fmt.Fprintf(os.Stderr, "%s\n", err.Error())
			os.Exit(2)
		}
	} else if len(mainConfig.Shared.MetricPrefix) == 0 {
		fmt.Fprintf(os.Stderr, "metric prefix or metric files not set\n")
		os.Exit(2)
	}

	if err = worker("localhost", &mainConfig.Local, &mainConfig.Shared, workerConfig); err != nil {
		fmt.Fprintf(os.Stderr, "%s\n", err.Error())
		os.Exit(2)
	}
}

func globalFlags(cmd *cobra.Command, allConfig *LocalConfig) {
	cmd.Flags().BoolVarP(&allConfig.Verbose, "verbose", "v", false, "verbose")

	cmd.Flags().DurationVarP(&allConfig.AggrDuration, "aduration", "A", time.Minute, "aggregation duration")
	cmd.Flags().StringVarP(&allConfig.AggrFile, "aggr", "a", "", "sended metrics file (appended)")
	cmd.Flags().StringVarP(&allConfig.Graphite, "graphite", "g", "", "graphite relay address:port")
	cmd.Flags().StringVarP(&allConfig.GraphitePrefix, "gprefix", "G", "test.carbontest", "metric prefix for aggregated stat")

	cmd.Flags().StringVar(&allConfig.StatFile, "stat", "", "sended metrics stat file (appended)")
	cmd.Flags().StringVar(&allConfig.DetailFile, "detail", "", "sended metrics (with value/timestamp) file (appended)")

	cmd.Flags().StringVar(&allConfig.CPUProf, "cpuprofile", "", "write cpu profile to file")

	cmd.Flags().SortFlags = false
}

func localPostConfig(config *LocalConfig) error {
	if len(config.GraphitePrefix) > 0 {
		hostname, err := os.Hostname()
		if err != nil {
			return err
		}
		config.Hostname = strings.Split(hostname, ".")[0]
		config.GraphitePrefix = config.GraphitePrefix + ".carbontest." + config.Hostname
	}

	return nil
}

func standaloneFlags(rootCmd *cobra.Command) {
	cmd := &cobra.Command{
		Use:   "run",
		Short: "Run in standalone mode",
		Run:   standaloneRun,
	}

	mainConfig.Workers = make(map[string]*WorkerConfig)

	globalFlags(cmd, &mainConfig.Local)

	cmd.Flags().SortFlags = false

	cmd.Flags().DurationVarP(&mainConfig.Shared.Duration, "duration", "d", 60*time.Second, "total test duration")

	mainConfig.Workers["localhost"] = &WorkerConfig{}

	// Test endpoint
	cmd.Flags().StringVarP(&mainConfig.Shared.T.Address, "host", "r", "127.0.0.1", "address[:port] (default port: 2003)")

	// TCP settings
	cmd.Flags().IntVarP(&mainConfig.Shared.T.TCP.Workers, "workers", "w", 10, "TCP workers")
	cmd.Flags().IntVarP(&mainConfig.Shared.T.TCP.Metrics, "metrics", "m", 1, "metrics sended in one TCP connection")
	cmd.Flags().IntVarP(&mainConfig.Shared.T.TCP.BatchSend, "batch", "b", 1, "metrics count in one TCP send")

	cmd.Flags().DurationVarP(&mainConfig.Shared.T.ConTimeout, "con_timeout", "c", 100*time.Millisecond, "TCP connect timeout")
	cmd.Flags().DurationVarP(&mainConfig.Shared.T.SendTimeout, "send_timeout", "s", 500*time.Millisecond, "TCP send timeout")

	// UDP settings
	cmd.Flags().IntVarP(&mainConfig.Shared.T.UDP.Workers, "uworkers", "u", 0, "UDP workers (default 0)")
	cmd.Flags().IntVarP(&mainConfig.Shared.T.UDP.BatchSend, "ubatch", "B", 1, "metrics count in one UDP send")
	cmd.Flags().IntVarP(&mainConfig.Shared.T.UDP.Metrics, "umetrics", "M", 1, "metrics sended before reinit UDP")

	// Metrics source
	// Random metrics
	cmd.Flags().StringVarP(&mainConfig.Shared.MetricPrefix, "prefix", "P", "test", "metric prefix (for autogenerated metrics)")
	// Metrics from file
	cmd.Flags().VarP(&mainConfig.Local.MetricFiles, "file", "f", "metrics file (valid: plain text, gz) (format: Name [min[:max[:increment]]")
	// Min/Max/Incr
	cmd.Flags().Int32Var(&mainConfig.Shared.Min, "min", 0, "default min value for metrics file")
	cmd.Flags().Int32Var(&mainConfig.Shared.Max, "max", 0, "default max value for metrics file")
	cmd.Flags().Int32Var(&mainConfig.Shared.Incr, "incr", 0, "default incr value for metrics file (if 0 - value is random, also increase until max, than descrease to min)")

	cmd.Flags().VarP(&mainConfig.Shared.T.SendDelay, "delay", "D", "send delay random range (0s) (min[:max])")
	cmd.Flags().IntVar(&mainConfig.Shared.T.RateLimit, "rate", 0, "rate limit/s")

	cmd.Flags().StringVar(&mainConfig.Shared.T.Compress, "compress", "", "compress [ none | gzip | lz4 ]")

	cmd.Flags().StringVarP(&mainConfig.Shared.GraphiteAPI, "graphite-api", "T", "", "graphite API base address (for basic auth set GRAPHITE_USERNAME and GRAPHITE_PASSWORD env vars)")
	cmd.Flags().VarP(&mainConfig.Shared.AutostopChecks, "autostop", "S", "auto-stop checks (TYPE:EXPRESSION)")
	cmd.Flags().IntVar(&mainConfig.Shared.AutostopMaxAbsent, "max-absent", 2, "autostop max absent (not exist) values (for metrics in autostop rules)")

	rootCmd.AddCommand(cmd)
}

func main() {

	var rootCmd = &cobra.Command{
		Use:   os.Args[0],
		Short: "carbontest is a carbon load test tool",
	}

	// fmt.Printf("%+v\n", os.Args)

	standaloneFlags(rootCmd)
	splitFlags(rootCmd)
	generateFlags(rootCmd)

	go sigHandler()

	if err := rootCmd.Execute(); err != nil {
		log.Printf("%s\n", err.Error())
		os.Exit(1)
	}
}
